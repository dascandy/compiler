TOK_KEYWORD_enum: enum
TOK_IDENTIFIER: Type
TOK_LCURLY: {
TOK_IDENTIFIER: TOK_NONE
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_HASH
TOK_EQUALS: =
TOK_CHAR: '#'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_EXCL
TOK_EQUALS: =
TOK_CHAR: '!'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_not
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_EXCL
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_PERCENT
TOK_EQUALS: =
TOK_CHAR: '%'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_CARET
TOK_EQUALS: =
TOK_CHAR: '^'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_xor
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_CARET
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_TILDE
TOK_EQUALS: =
TOK_CHAR: '~'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_compl
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_TILDE
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_LANGLE
TOK_EQUALS: =
TOK_CHAR: '<'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_EQUALS
TOK_EQUALS: =
TOK_CHAR: '='
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_RANGLE
TOK_EQUALS: =
TOK_CHAR: '>'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_MINUS
TOK_EQUALS: =
TOK_CHAR: '-'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_COMMA
TOK_EQUALS: =
TOK_CHAR: ','
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_PIPE
TOK_EQUALS: =
TOK_CHAR: '|'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_bitor
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_PIPE
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_SEMICOLON
TOK_EQUALS: =
TOK_CHAR: ';'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_COLON
TOK_EQUALS: =
TOK_CHAR: ':'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_SCOPE
TOK_EQUALS: =
TOK_CHAR: ':'
TOK_PIPE: |
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_QUESTION
TOK_EQUALS: =
TOK_CHAR: '?'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_SLASH
TOK_EQUALS: =
TOK_CHAR: '/'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_SLASH_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '/'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_DOT
TOK_EQUALS: =
TOK_CHAR: '.'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_DOT_STAR
TOK_EQUALS: =
TOK_CHAR: '.'
TOK_PIPE: |
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_LPAREN
TOK_EQUALS: =
TOK_CHAR: '('
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_RPAREN
TOK_EQUALS: =
TOK_CHAR: ')'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_LBRACKET
TOK_EQUALS: =
TOK_CHAR: '['
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_RBRACKET
TOK_EQUALS: =
TOK_CHAR: ']'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_LCURLY
TOK_EQUALS: =
TOK_CHAR: '{'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_RCURLY
TOK_EQUALS: =
TOK_CHAR: '}'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_STAR
TOK_EQUALS: =
TOK_CHAR: '*'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_AMP
TOK_EQUALS: =
TOK_CHAR: '&'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_bitand
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_AMP
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_PLUS
TOK_EQUALS: =
TOK_CHAR: '+'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_CARET_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '^'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_xor_eq
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_CARET_EQ
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_TILDE_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '~'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_LANGLE_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '<'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_EQUALS_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '='
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_RANGLE_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '>'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_PIPE_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '|'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_or_eq
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_PIPE_EQ
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_MINUS_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '-'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_EXCL_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '!'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_not_eq
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_EXCL_EQ
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_STAR_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '*'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_AMP_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '&'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_and_eq
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_AMP_EQ
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_PERCENT_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '%'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_PLUS_EQ
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x80
TOK_PIPE: |
TOK_CHAR: '+'
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_LEFTSHIFT
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_IDENTIFIER: x100
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_LEFTSHIFT_EQ
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_RIGHTSHIFT
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_RIGHTSHIFT_EQ
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_ARROW
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_ARROW_STAR
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_AMP_AMP
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_and
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_AMP_AMP
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_PIPE_PIPE
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_or
TOK_EQUALS: =
TOK_IDENTIFIER: TOK_PIPE_PIPE
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_INCREMENT
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_DECREMENT
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_SPACESHIP
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_STRING
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_CHAR
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_NUMBER
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_IDENTIFIER
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_alignas
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_alignof
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_asm
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_auto
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_bool
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_break
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_case
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_catch
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_char
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_char16_t
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_char32_t
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_class
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_const
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_constexpr
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_const_cast
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_continue
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_decltype
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_default
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_delete
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_do
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_double
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_dynamic_cast
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_else
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_enum
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_explicit
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_extern
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_false
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_float
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_for
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_friend
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_goto
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_if
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_inline
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_int
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_long
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_mutable
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_namespace
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_new
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_noexcept
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_nullptr
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_operator
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_private
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_protected
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_public
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_register
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_reinterpret_cast
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_return
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_short
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_signed
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_sizeof
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_static
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_static_assert
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_static_cast
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_struct
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_switch
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_template
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_this
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_thread_local
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_throw
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_true
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_try
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_typedef
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_typeid
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_typename
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_union
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_unsigned
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_using
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_virtual
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_void
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_volatile
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_wchar_t
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_while
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_override
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_final
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_transaction_safe
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_transaction_safe_dynamic
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_synchronized
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_requires
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_export
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_import
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_atomic_cancel
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_atomic_commit
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_atomic_noexcept
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_concept
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_co_await
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_co_return
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_co_yield
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_KEYWORD_module
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_COMMENT_EOL
TOK_COMMA: ,
TOK_IDENTIFIER: TOK_COMMENT_COMPOUND
TOK_COMMA: ,
TOK_RCURLY: }
TOK_SEMICOLON: ;
TOK_IDENTIFIER: std
TOK_SCOPE: ::
TOK_IDENTIFIER: ostream
TOK_AMP: &
TOK_KEYWORD_operator: operator
TOK_LEFTSHIFT: <<
TOK_LPAREN: (
TOK_IDENTIFIER: std
TOK_SCOPE: ::
TOK_IDENTIFIER: ostream
TOK_AMP: &
TOK_IDENTIFIER: os
TOK_COMMA: ,
TOK_IDENTIFIER: Type
TOK_IDENTIFIER: t
TOK_RPAREN: )
TOK_SEMICOLON: ;
TOK_KEYWORD_struct: struct
TOK_IDENTIFIER: Token
TOK_LCURLY: {
TOK_IDENTIFIER: Token
TOK_LPAREN: (
TOK_IDENTIFIER: Type
TOK_IDENTIFIER: t
TOK_COMMA: ,
TOK_IDENTIFIER: std
TOK_SCOPE: ::
TOK_IDENTIFIER: string_view
TOK_IDENTIFIER: text
TOK_RPAREN: )
TOK_COLON: :
TOK_IDENTIFIER: t
TOK_LPAREN: (
TOK_IDENTIFIER: t
TOK_RPAREN: )
TOK_COMMA: ,
TOK_IDENTIFIER: text
TOK_LPAREN: (
TOK_IDENTIFIER: text
TOK_RPAREN: )
TOK_LCURLY: {
TOK_RCURLY: }
TOK_IDENTIFIER: Token
TOK_LPAREN: (
TOK_RPAREN: )
TOK_LCURLY: {
TOK_RCURLY: }
TOK_IDENTIFIER: std
TOK_SCOPE: ::
TOK_IDENTIFIER: string_view
TOK_IDENTIFIER: text
TOK_SEMICOLON: ;
TOK_IDENTIFIER: Type
TOK_IDENTIFIER: t
TOK_SEMICOLON: ;
TOK_RCURLY: }
TOK_SEMICOLON: ;
TOK_KEYWORD_class: class
TOK_IDENTIFIER: Lexer
TOK_LCURLY: {
TOK_KEYWORD_public: public
TOK_COLON: :
TOK_IDENTIFIER: Lexer
TOK_LPAREN: (
TOK_IDENTIFIER: std
TOK_SCOPE: ::
TOK_IDENTIFIER: string_view
TOK_IDENTIFIER: str
TOK_RPAREN: )
TOK_COLON: :
TOK_IDENTIFIER: str
TOK_LPAREN: (
TOK_IDENTIFIER: str
TOK_RPAREN: )
TOK_LCURLY: {
TOK_IDENTIFIER: readToken
TOK_LPAREN: (
TOK_RPAREN: )
TOK_SEMICOLON: ;
TOK_RCURLY: }
TOK_IDENTIFIER: std
TOK_SCOPE: ::
TOK_IDENTIFIER: string_view
TOK_IDENTIFIER: str
TOK_SEMICOLON: ;
TOK_IDENTIFIER: size_t
TOK_IDENTIFIER: cur
TOK_EQUALS: =
TOK_NUMBER: 0
TOK_SEMICOLON: ;
TOK_IDENTIFIER: Token
TOK_IDENTIFIER: token
TOK_SEMICOLON: ;
TOK_KEYWORD_void: void
TOK_KEYWORD_operator: operator
TOK_INCREMENT: ++
TOK_LPAREN: (
TOK_RPAREN: )
TOK_LCURLY: {
TOK_IDENTIFIER: readToken
TOK_LPAREN: (
TOK_RPAREN: )
TOK_SEMICOLON: ;
TOK_RCURLY: }
TOK_KEYWORD_void: void
TOK_IDENTIFIER: readToken
TOK_LPAREN: (
TOK_RPAREN: )
TOK_SEMICOLON: ;
TOK_IDENTIFIER: Lexer
TOK_AMP: &
TOK_IDENTIFIER: begin
TOK_LPAREN: (
TOK_RPAREN: )
TOK_LCURLY: {
TOK_KEYWORD_return: return
TOK_STAR: *
TOK_KEYWORD_this: this
TOK_SEMICOLON: ;
TOK_RCURLY: }
TOK_KEYWORD_struct: struct
TOK_IDENTIFIER: sentinel
TOK_LCURLY: {
TOK_RCURLY: }
TOK_SEMICOLON: ;
TOK_IDENTIFIER: sentinel
TOK_IDENTIFIER: end
TOK_LPAREN: (
TOK_RPAREN: )
TOK_LCURLY: {
TOK_KEYWORD_return: return
TOK_IDENTIFIER: sentinel
TOK_LCURLY: {
TOK_RCURLY: }
TOK_SEMICOLON: ;
TOK_RCURLY: }
TOK_IDENTIFIER: Token
TOK_AMP: &
TOK_KEYWORD_operator: operator
TOK_STAR: *
TOK_LPAREN: (
TOK_RPAREN: )
TOK_LCURLY: {
TOK_KEYWORD_return: return
TOK_IDENTIFIER: token
TOK_SEMICOLON: ;
TOK_RCURLY: }
TOK_KEYWORD_bool: bool
TOK_KEYWORD_operator: operator
TOK_EQUALS_EQ: ==
TOK_LPAREN: (
TOK_KEYWORD_const: const
TOK_IDENTIFIER: sentinel
TOK_AMP: &
TOK_RPAREN: )
TOK_LCURLY: {
TOK_KEYWORD_return: return
TOK_IDENTIFIER: cur
TOK_RANGLE: >
TOK_IDENTIFIER: str
TOK_DOT: .
TOK_IDENTIFIER: size
TOK_LPAREN: (
TOK_RPAREN: )
TOK_SEMICOLON: ;
TOK_RCURLY: }
TOK_KEYWORD_bool: bool
TOK_KEYWORD_operator: operator
TOK_EXCL_EQ: !=
TOK_LPAREN: (
TOK_KEYWORD_const: const
TOK_IDENTIFIER: sentinel
TOK_AMP: &
TOK_RPAREN: )
TOK_LCURLY: {
TOK_KEYWORD_return: return
TOK_IDENTIFIER: cur
TOK_LANGLE_EQ: <=
TOK_IDENTIFIER: str
TOK_DOT: .
TOK_IDENTIFIER: size
TOK_LPAREN: (
TOK_RPAREN: )
TOK_SEMICOLON: ;
TOK_RCURLY: }
TOK_RCURLY: }
TOK_SEMICOLON: ;
