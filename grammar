
toplevel_statement ::= variable_declaration ';'
                     | function

type ::= cv_qualifier ( 'auto' | enum_type | struct_type | scoped_name ) cv_qualifier { '*' cv_qualifier } [ '&' | '&&' ]

regular_function ::= type untyped_function ( scope_body | ';' )
untyped_function ::= scoped_name '(' [ variable_declaration { ',' variable_declaration } ] ')' 
constructor ::= untyped_function ( ';' | [ ':' initializer_list_entry { ',' initializer_list_entry } ] scope_body )
member_function ::= type untyped_function cv_qualifier ( scope_body | ';' )

initializer_list_entry ::= name '(' expression ')'

variable_declaration ::= type [ name ] [ '=' expression ]

scoped_name ::= name { '::' name }

name ::= 'operator' any_overloadable_operator
       | string_literal

any_overloadable_operator ::= '<<' | '>>' | '++' | '==' | '!=' | ...

scope_body ::= '{' { statement } '}'

enum_type ::= 'enum' [ name ] [ '{' enum_value { ',' enum_value } [ ',' ] '}' ]
struct_type ::= ( 'struct' | 'class' ) [ name ] [ '{' { struct_member_declaration } '}' ]
enum_value ::= name [ '=' expression ]

struct_member_declaration ::= variable_declaration
                            | regular_function
                            | untyped_function
                            | '~' untyped_function
                            | access_modifier ':'

access_modifier ::= 'public' | 'private' | 'protected'

statement ::= expression ';'
            | 'return' expression ';'
expression ::= name ( ( '.' | '->' ) name [ '(' expression { ',' expression } ')' ] )
             | immediate_value
             | expression '|' expression
             | expression '=' expression
             | scoped_name '(' [ expression { ',' expression } ] ')'
             | scoped_name '{' [ expression { ',' expression } ] '}'
             | variable_declaration
             | unary_operator expression


